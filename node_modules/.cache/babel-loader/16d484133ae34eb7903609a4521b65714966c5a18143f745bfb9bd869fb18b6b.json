{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport api from \"@/services/api\";\nexport default {\n  data() {\n    return {\n      recipe: null,\n      showCommentsModal: false,\n      // Stanje za prikaz modala komentara\n      isFavorite: false,\n      newComment: \"\",\n      isLiked: false // Stanje za praćenje lajkanja\n    };\n  },\n  async created() {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.korisnickiId = payload.id;\n\n        // Dohvati lajkanje\n        const likedResponse = await api.get(\"/korisnici/lajkani\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const lajkaniRecepti = likedResponse.data;\n\n        // Provjeri je li trenutni recept lajkan\n        this.isLiked = lajkaniRecepti.includes(this.$route.params.id);\n      }\n      const response = await api.get(`/recepti/${this.$route.params.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.recipe = response.data;\n      this.isFavorite = response.data.isFavorite;\n      this.recipe.svidanja = response.data.svidanja; // Postavi broj lajkova\n    } catch (error) {\n      console.error(\"Greška pri dohvaćanju podataka:\", error);\n    }\n  },\n  methods: {\n    toggleCommentsModal() {\n      this.showCommentsModal = !this.showCommentsModal; // Prebaci stanje modala\n    },\n    async toggleLike() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"Molimo prijavite se kako biste mogli lajkati recepte.\");\n        return this.$router.push(\"/login\");\n      }\n      try {\n        if (this.isLiked) {\n          await api.delete(`/korisnici/lajk`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            },\n            params: {\n              receptId: this.recipe._id\n            }\n          });\n          this.recipe.svidanja -= 1; // Smanji broj lajkova\n        } else {\n          await api.post(`/korisnici/lajk`, {\n            receptId: this.recipe._id\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.recipe.svidanja += 1; // Povećaj broj lajkova\n        }\n        this.isLiked = !this.isLiked; // Prebaci stanje\n      } catch (error) {\n        console.error(\"Greška pri upravljanju lajkovima:\", error);\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\n      }\n    },\n    async toggleFavorite() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (this.isFavorite) {\n          await api.delete(\"/korisnici/omiljeni\", {\n            headers: {\n              Authorization: `Bearer ${token}`\n            },\n            params: {\n              receptId: this.recipe._id\n            }\n          });\n          this.isFavorite = false;\n          alert(\"Recept je uklonjen iz omiljenih.\");\n        } else {\n          await api.post(\"/korisnici/omiljeni\", {\n            receptId: this.recipe._id\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.isFavorite = true;\n          alert(\"Recept je dodan u omiljene.\");\n        }\n      } catch (error) {\n        console.error(\"Greška pri upravljanju omiljenima:\", error);\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\n      }\n    },\n    async addComment() {\n      if (!this.newComment.trim()) {\n        alert(\"Komentar ne može biti prazan.\");\n        return;\n      }\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          alert(\"Molimo prijavite se kako biste dodali komentar.\");\n          this.$router.push(\"/login\");\n          return;\n        }\n        const response = await api.post(`/recepti/${this.recipe._id}/komentari`, {\n          tekst: this.newComment\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.recipe.komentari.push(response.data);\n        this.newComment = \"\"; // Resetiraj unos komentara\n        this.toggleCommentsModal();\n      } catch (error) {\n        console.error(\"Greška pri dodavanju komentara:\", error);\n        alert(\"Došlo je do greške prilikom dodavanja komentara.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","data","recipe","showCommentsModal","isFavorite","newComment","isLiked","created","token","localStorage","getItem","payload","JSON","parse","atob","split","korisnickiId","id","likedResponse","get","headers","Authorization","lajkaniRecepti","includes","$route","params","response","svidanja","error","console","methods","toggleCommentsModal","toggleLike","alert","$router","push","delete","receptId","_id","post","toggleFavorite","addComment","trim","tekst","komentari"],"sources":["C:\\Users\\MATIN\\Desktop\\web aplikacije\\WA-frontend\\src\\views\\ReceptStranica.vue"],"sourcesContent":["<template>\r\n  <div class=\"recept-stranica\">\r\n    <div v-if=\"recipe\" class=\"recept-container\">\r\n      <h1 class=\"recept-naziv\">{{ recipe.naziv }}</h1>\r\n      <img :src=\"recipe.slika\" alt=\"Slika recepta\" class=\"recept-slika\" />\r\n\r\n      <div class=\"recept-sastojci\">\r\n        <h2>Sastojci:</h2>\r\n        <ul>\r\n          <li v-for=\"sastojak in recipe.sastojci\" :key=\"sastojak\">{{ sastojak }}</li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"recept-porcije\">\r\n        <p><strong>Broj porcija:</strong> {{ recipe.porcije }}</p>\r\n      </div>\r\n\r\n      <div class=\"recept-upute\">\r\n        <h2>Upute:</h2>\r\n        <p>{{ recipe.upute }}</p>\r\n      </div>\r\n\r\n      <div class=\"recept-interakcije\">\r\n        <!-- Lajkovi -->\r\n        <div class=\"like-container\">\r\n          <button @click=\"toggleLike\" class=\"recept-button1\">\r\n            <img\r\n              height=\"25px\"\r\n              :src=\"isLiked ? '/heartda.png' : '/heartne.png'\"\r\n              alt=\"lajkovi\"\r\n            />\r\n            <span>{{ recipe.svidanja }}</span>\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Komentari -->\r\n        <div class=\"komentar-container\">\r\n          <button class=\"recept-button1\" @click=\"toggleCommentsModal\">\r\n            <img\r\n              height=\"25px\"\r\n              :src=\"showCommentsModal ? '/commentda.png' : '/commentne.png'\"\r\n              alt=\"Komentari\"\r\n            />\r\n            <span>{{ recipe.komentari.length }}</span>\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Omiljeni recepti -->\r\n        <button\r\n          v-if=\"isFavorite\"\r\n          class=\"favorite-button remove\"\r\n          @click=\"toggleFavorite\"\r\n        >\r\n          Makni iz omiljenih\r\n        </button>\r\n        <button\r\n          v-else\r\n          class=\"favorite-button add\"\r\n          @click=\"toggleFavorite\"\r\n        >\r\n          Dodaj u omiljene\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"recept-error\">\r\n      <p>Recept nije pronađen.</p>\r\n    </div>\r\n\r\n    <!-- Modal za komentare -->\r\n    <div v-if=\"showCommentsModal\" class=\"modal-overlay\">\r\n      <div class=\"modal\">\r\n        <button class=\"modal-close\" @click=\"toggleCommentsModal\">X</button>\r\n        <h2>Komentari</h2>\r\n        <ul v-if=\"recipe.komentari.length > 0\">\r\n          <li v-for=\"komentar in recipe.komentari\" :key=\"komentar.datum\">\r\n            {{ komentar.tekst }} - <strong>{{ komentar.korisnik }}</strong>\r\n          </li>\r\n        </ul>\r\n        <p v-else class=\"no-comments\">Nema komentara.</p>\r\n\r\n        <div class=\"dodaj-komentar\">\r\n          <textarea\r\n            v-model=\"newComment\"\r\n            placeholder=\"Dodajte komentar...\"\r\n            class=\"comment-input\"\r\n          ></textarea>\r\n          <button @click=\"addComment\" class=\"comment-button\">Dodaj komentar</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"@/services/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      recipe: null,\r\n      showCommentsModal: false, // Stanje za prikaz modala komentara\r\n      isFavorite: false,\r\n      newComment: \"\",\r\n      isLiked: false, // Stanje za praćenje lajkanja\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (token) {\r\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\r\n        this.korisnickiId = payload.id;\r\n\r\n        // Dohvati lajkanje\r\n        const likedResponse = await api.get(\"/korisnici/lajkani\", {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        const lajkaniRecepti = likedResponse.data;\r\n\r\n        // Provjeri je li trenutni recept lajkan\r\n        this.isLiked = lajkaniRecepti.includes(this.$route.params.id);\r\n      }\r\n\r\n      const response = await api.get(`/recepti/${this.$route.params.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      this.recipe = response.data;\r\n      this.isFavorite = response.data.isFavorite;\r\n      this.recipe.svidanja = response.data.svidanja; // Postavi broj lajkova\r\n    } catch (error) {\r\n      console.error(\"Greška pri dohvaćanju podataka:\", error);\r\n    }\r\n  },\r\n  methods: {\r\n    toggleCommentsModal() {\r\n      this.showCommentsModal = !this.showCommentsModal; // Prebaci stanje modala\r\n    },\r\n    async toggleLike() {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        alert(\"Molimo prijavite se kako biste mogli lajkati recepte.\");\r\n        return this.$router.push(\"/login\");\r\n      }\r\n\r\n      try {\r\n        if (this.isLiked) {\r\n          await api.delete(`/korisnici/lajk`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params: { receptId: this.recipe._id },\r\n          });\r\n          this.recipe.svidanja -= 1; // Smanji broj lajkova\r\n        } else {\r\n          await api.post(`/korisnici/lajk`, { receptId: this.recipe._id }, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          this.recipe.svidanja += 1; // Povećaj broj lajkova\r\n        }\r\n\r\n        this.isLiked = !this.isLiked; // Prebaci stanje\r\n      } catch (error) {\r\n        console.error(\"Greška pri upravljanju lajkovima:\", error);\r\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\r\n      }\r\n    },\r\n    async toggleFavorite() {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n\r\n        if (this.isFavorite) {\r\n          await api.delete(\"/korisnici/omiljeni\", {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params: { receptId: this.recipe._id },\r\n          });\r\n          this.isFavorite = false;\r\n          alert(\"Recept je uklonjen iz omiljenih.\");\r\n        } else {\r\n          await api.post(\"/korisnici/omiljeni\", { receptId: this.recipe._id }, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          this.isFavorite = true;\r\n          alert(\"Recept je dodan u omiljene.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Greška pri upravljanju omiljenima:\", error);\r\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\r\n      }\r\n    },\r\n    async addComment() {\r\n      if (!this.newComment.trim()) {\r\n        alert(\"Komentar ne može biti prazan.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (!token) {\r\n          alert(\"Molimo prijavite se kako biste dodali komentar.\");\r\n          this.$router.push(\"/login\");\r\n          return;\r\n        }\r\n\r\n        const response = await api.post(\r\n          `/recepti/${this.recipe._id}/komentari`,\r\n          { tekst: this.newComment },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n\r\n        this.recipe.komentari.push(response.data);\r\n\r\n        this.newComment = \"\"; // Resetiraj unos komentara\r\n        this.toggleCommentsModal();\r\n      } catch (error) {\r\n        console.error(\"Greška pri dodavanju komentara:\", error);\r\n        alert(\"Došlo je do greške prilikom dodavanja komentara.\");\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Dodajte relevantne stilove za modal, gumbove, i interakcije */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal {\r\n  background: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  width: 90%;\r\n  max-width: 500px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.modal-close {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  background: none;\r\n  border: none;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n}\r\n\r\n.recept-button1 {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 10px 15px;\r\n  background: #fee6c1;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  margin-top: 15px;\r\n  transition: background 0.3s ease, transform 0.2s ease;\r\n}\r\n\r\n.recept-button1:hover {\r\n  background: #fbf5e5;\r\n  color: #c97d60;\r\n  transform: scale(1.05);\r\n}\r\n\r\n.comment-input {\r\n  width: 100%;\r\n  height: 60px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.comment-button {\r\n  padding: 8px 16px;\r\n  background-color: #2a231f;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n}\r\n\r\n.comment-button:hover {\r\n  background-color: #fbf5e5;\r\n  color: #2a231f;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}