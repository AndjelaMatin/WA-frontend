{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from \"@/services/api\";\nexport default {\n  data() {\n    return {\n      recipe: null,\n      showComments: false,\n      isFavorite: false,\n      newComment: \"\"\n    };\n  },\n  async created() {\n    try {\n      const response = await api.get(`/recepti/${this.$route.params.id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      this.recipe = response.data;\n      this.isFavorite = response.data.isFavorite;\n      const commentsResponse = await api.get(`/recepti/${this.$route.params.id}/komentari`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      this.recipe.komentari = commentsResponse.data;\n    } catch (error) {\n      console.error(\"Greška pri dohvaćanju podataka:\", error);\n    }\n  },\n  methods: {\n    async addComment() {\n      if (!this.newComment.trim()) {\n        alert(\"Komentar ne može biti prazan.\");\n        return;\n      }\n      try {\n        const response = await api.post(`/recepti/${this.recipe._id}/komentari`, {\n          tekst: this.newComment\n        }, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        this.recipe.komentari.push(response.data); // Ažuriraj lokalnu listu komentara\n        this.newComment = \"\"; // Resetuj polje za unos\n      } catch (error) {\n        console.error(\"Greška pri dodavanju komentara:\", error);\n      }\n    },\n    async deleteComment(komentarId) {\n      try {\n        await api.delete(`/recepti/${this.recipe._id}/komentari/${komentarId}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        this.recipe.komentari = this.recipe.komentari.filter(komentar => komentar._id !== komentarId); // Ukloni komentar lokalno\n      } catch (error) {\n        console.error(\"Greška pri brisanju komentara:\", error);\n      }\n    },\n    toggleComments() {\n      this.showComments = !this.showComments;\n    },\n    async toggleFavorite() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (this.isFavorite) {\n          // Ukloni iz omiljenih\n          await api.delete('/korisnici/omiljeni', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            },\n            params: {\n              receptId: this.recipe._id\n            } // Pošalji receptId kao parametar\n          });\n          this.isFavorite = false;\n          alert(\"Recept je uklonjen iz omiljenih.\");\n        } else {\n          // Dodaj u omiljene\n          await api.post('/korisnici/omiljeni', {\n            receptId: this.recipe._id\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.isFavorite = true;\n          alert(\"Recept je dodan u omiljene.\");\n        }\n      } catch (error) {\n        console.error(\"Greška pri upravljanju omiljenima:\", error);\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","data","recipe","showComments","isFavorite","newComment","created","response","get","$route","params","id","headers","Authorization","localStorage","getItem","commentsResponse","komentari","error","console","methods","addComment","trim","alert","post","_id","tekst","push","deleteComment","komentarId","delete","filter","komentar","toggleComments","toggleFavorite","token","receptId"],"sources":["C:\\Users\\MATIN\\Desktop\\web aplikacije\\WA-frontend\\src\\views\\ReceptStranica.vue"],"sourcesContent":["<template>\r\n  <div class=\"recept-stranica\">\r\n    <div v-if=\"recipe\" class=\"recept-container\">\r\n      <h1 class=\"recept-naziv\">{{ recipe.naziv }}</h1>\r\n      <img :src=\"recipe.slika\" alt=\"Slika recepta\" class=\"recept-slika\" />\r\n\r\n      <div class=\"recept-sastojci\">\r\n        <h2>Sastojci:</h2>\r\n        <ul>\r\n          <li v-for=\"sastojak in recipe.sastojci\" :key=\"sastojak\">{{ sastojak }}</li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"recept-porcije\">\r\n        <p><strong>Broj porcija:</strong> {{ recipe.porcije }}</p>\r\n      </div>\r\n\r\n      <div class=\"recept-upute\">\r\n        <h2>Upute:</h2>\r\n        <p>{{ recipe.upute }}</p>\r\n      </div>\r\n\r\n      <div class=\"recept-interakcije\">\r\n  <p><strong>Broj sviđanja:</strong> {{ recipe.svidanja }}</p>\r\n  <button class=\"toggle-komentari\" @click=\"toggleComments\">\r\n    {{ showComments ? \"Sakrij komentare\" : \"Prikaži komentare\" }}\r\n  </button>\r\n  <button\r\n    v-if=\"isFavorite\"\r\n    class=\"favorite-button remove\"\r\n    @click=\"toggleFavorite\"\r\n  >\r\n    Makni iz omiljenih\r\n  </button>\r\n  <button\r\n    v-else\r\n    class=\"favorite-button add\"\r\n    @click=\"toggleFavorite\"\r\n  >\r\n    Dodaj u omiljene\r\n  </button>\r\n</div>\r\n<div v-if=\"showComments\" class=\"recept-komentari\">\r\n  <ul v-if=\"recipe.komentari.length > 0\">\r\n    <li v-for=\"komentar in recipe.komentari\" :key=\"komentar.datum\">\r\n      {{ komentar.tekst }} - <strong>{{ komentar.korisnik }}</strong>\r\n      <button\r\n        v-if=\"komentar.korisnik === korisnik.id\"\r\n        @click=\"deleteComment(komentar._id)\"\r\n      >\r\n        Obriši\r\n      </button>\r\n    </li>\r\n  </ul>\r\n  <p v-else class=\"no-comments\">Nema komentara.</p>\r\n  <div>\r\n    <textarea v-model=\"newComment\" placeholder=\"Unesite komentar...\"></textarea>\r\n    <button @click=\"addComment\">Dodaj komentar</button>\r\n  </div>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"recept-error\">\r\n      <p>Recept nije pronađen.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"@/services/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      recipe: null, \r\n      showComments: false, \r\n      isFavorite: false,\r\n      newComment: \"\",\r\n    };\r\n  },\r\n  async created() {\r\n  try {\r\n    const response = await api.get(`/recepti/${this.$route.params.id}`, {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    });\r\n    this.recipe = response.data;\r\n    this.isFavorite = response.data.isFavorite;\r\n\r\n    const commentsResponse = await api.get(`/recepti/${this.$route.params.id}/komentari`, {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    });\r\n    this.recipe.komentari = commentsResponse.data; \r\n  } catch (error) {\r\n    console.error(\"Greška pri dohvaćanju podataka:\", error);\r\n  }\r\n},\r\n  methods: {\r\n    async addComment() {\r\n    if (!this.newComment.trim()) {\r\n      alert(\"Komentar ne može biti prazan.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await api.post(\r\n        `/recepti/${this.recipe._id}/komentari`,\r\n        { tekst: this.newComment },\r\n        { headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` } }\r\n      );\r\n      this.recipe.komentari.push(response.data); // Ažuriraj lokalnu listu komentara\r\n      this.newComment = \"\"; // Resetuj polje za unos\r\n    } catch (error) {\r\n      console.error(\"Greška pri dodavanju komentara:\", error);\r\n    }\r\n  },\r\n  async deleteComment(komentarId) {\r\n  try {\r\n    await api.delete(`/recepti/${this.recipe._id}/komentari/${komentarId}`, {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    });\r\n    this.recipe.komentari = this.recipe.komentari.filter(\r\n      (komentar) => komentar._id !== komentarId\r\n    ); // Ukloni komentar lokalno\r\n  } catch (error) {\r\n    console.error(\"Greška pri brisanju komentara:\", error);\r\n  }\r\n},\r\n    toggleComments() {\r\n      this.showComments = !this.showComments; \r\n    },\r\n    async toggleFavorite() {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (this.isFavorite) {\r\n      // Ukloni iz omiljenih\r\n      await api.delete('/korisnici/omiljeni', {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n        params: { receptId: this.recipe._id }, // Pošalji receptId kao parametar\r\n      });\r\n      this.isFavorite = false;\r\n      alert(\"Recept je uklonjen iz omiljenih.\");\r\n    } else {\r\n      // Dodaj u omiljene\r\n      await api.post('/korisnici/omiljeni', { receptId: this.recipe._id }, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      this.isFavorite = true;\r\n      alert(\"Recept je dodan u omiljene.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Greška pri upravljanju omiljenima:\", error);\r\n    alert(\"Došlo je do greške. Pokušajte ponovno.\");\r\n  }\r\n},\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.recept-stranica {\r\n  max-width: 700px;\r\n  margin: 20px auto;\r\n  padding: 20px;\r\n  background: #fee6c1;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.recept-naziv {\r\n  text-align: center;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n  color: #2a231f;\r\n}\r\n\r\n.recept-slika {\r\n  display: block;\r\n  max-width: 100%;\r\n  height: 300px;\r\n  margin: 0 auto 20px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.recept-sastojci {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.recept-sastojci h2 {\r\n  font-size: 18px;\r\n  color: #c97d60;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.recept-sastojci ul {\r\n  list-style-type: disc;\r\n  padding-left: 20px;\r\n}\r\n\r\n.recept-porcije {\r\n  font-size: 16px;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n.recept-upute {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.recept-upute h2 {\r\n  font-size: 18px;\r\n  color: #c97d60;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.recept-interakcije {\r\n  text-align: center;\r\n  margin-top: 30px; \r\n  margin-bottom: 20px;\r\n}\r\n\r\n.recept-interakcije p {\r\n  font-size: 16px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.toggle-komentari, .favorite-button.add {\r\n  padding: 10px 20px;\r\n  background: #2a231f;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.toggle-komentari:hover, .favorite-button.add:hover  {\r\n  background: #fbf5e5;\r\n  color: #2a231f;\r\n}\r\n.favorite-button.remove {\r\n  padding: 10px 20px;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  transition: background 0.3s ease;\r\n  background: #c94e50;\r\n}\r\n\r\n.favorite-button.remove:hover {\r\n  background: #ff6b6b;\r\n}\r\n\r\n.recept-komentari ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.recept-komentari li {\r\n  padding: 10px;\r\n  background: #fbf5e5;\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.recept-komentari li:hover {\r\n  background: #ffe9c6;\r\n}\r\n\r\n.no-comments {\r\n  text-align: center;\r\n  color: #888;\r\n  font-style: italic;\r\n  margin-top: 10px;\r\n}\r\n\r\n.recept-error {\r\n  text-align: center;\r\n  font-size: 18px;\r\n  color: #c94e50;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}