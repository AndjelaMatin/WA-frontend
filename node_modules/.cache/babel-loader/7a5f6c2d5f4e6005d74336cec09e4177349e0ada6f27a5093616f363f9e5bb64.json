{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport PocetnaStranica from '../views/PocetnaStranica.vue';\nimport store from '@/services/store';\nconst routes = [{\n  path: '/',\n  name: 'pocetnaStranica',\n  component: PocetnaStranica,\n  props: true\n}, {\n  path: '/login',\n  name: 'loginSignup',\n  component: () => import('../views/LoginSignup.vue')\n}, {\n  path: '/profil',\n  name: 'profilStranica',\n  component: () => import('../views/ProfilStranica.vue'),\n  meta: {\n    requiresAuth: true\n  } // Protected route\n}, {\n  path: '/noviRecept',\n  name: 'noviRecept',\n  component: () => import('../views/NoviRecept.vue'),\n  meta: {\n    requiresAuth: true\n  } // Protected route\n}, {\n  path: '/oNama',\n  name: 'oNama',\n  component: () => import('../views/ONama.vue')\n}, {\n  path: '/recept/:id',\n  name: 'receptStranica',\n  component: () => import('../views/ReceptStranica.vue'),\n  props: true\n}, {\n  path: '/shoppingLista',\n  name: 'shoppingLista',\n  component: () => import('../views/ShoppingLista.vue')\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL || '/'),\n  routes // Pass the routes array here\n});\n\n// Add Navigation Guard for Authentication\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = store.state.isAuthenticated; // Check authentication state from Vuex\n\n  if (to.meta.requiresAuth && !isAuthenticated) {\n    // If the route requires auth and the user isn't authenticated, redirect to login\n    next('/login');\n  } else if (to.path === '/login' && isAuthenticated) {\n    // If the user is authenticated and tries to access the login page, redirect to profile\n    next('/profil');\n  } else {\n    // Allow navigation for all other routes\n    console.log(`Navigating to: ${to.path}, Authenticated: ${store.state.isAuthenticated}`);\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","PocetnaStranica","store","routes","path","name","component","props","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","isAuthenticated","state","console","log"],"sources":["C:/Users/MATIN/Desktop/web aplikacije/WA-frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\r\nimport PocetnaStranica from '../views/PocetnaStranica.vue';\r\nimport store from '@/services/store';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    name: 'pocetnaStranica',\r\n    component: PocetnaStranica,\r\n    props:true,\r\n  },\r\n  {\r\n    path: '/login',\r\n    name: 'loginSignup',\r\n    component: () => import('../views/LoginSignup.vue'),\r\n  },\r\n  {\r\n    path: '/profil',\r\n    name: 'profilStranica',\r\n    component: () => import('../views/ProfilStranica.vue'),\r\n    meta: { requiresAuth: true }, // Protected route\r\n  },\r\n  {\r\n    path: '/noviRecept',\r\n    name: 'noviRecept',\r\n    component: () => import('../views/NoviRecept.vue'),\r\n    meta: { requiresAuth: true }, // Protected route\r\n  },\r\n  {\r\n    path: '/oNama',\r\n    name: 'oNama',\r\n    component: () => import('../views/ONama.vue'),\r\n  },\r\n  {\r\n    path: '/recept/:id',\r\n    name: 'receptStranica',\r\n    component: () => import('../views/ReceptStranica.vue'),\r\n    props:true,\r\n  },\r\n  {\r\n    path: '/shoppingLista',\r\n    name: 'shoppingLista',\r\n    component: () => import('../views/ShoppingLista.vue'),\r\n  },\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(process.env.BASE_URL || '/'),\r\n  routes, // Pass the routes array here\r\n});\r\n\r\n// Add Navigation Guard for Authentication\r\nrouter.beforeEach((to, from, next) => {\r\n  const isAuthenticated = store.state.isAuthenticated; // Check authentication state from Vuex\r\n\r\n  if (to.meta.requiresAuth && !isAuthenticated) {\r\n    // If the route requires auth and the user isn't authenticated, redirect to login\r\n    next('/login');\r\n  } else if (to.path === '/login' && isAuthenticated) {\r\n    // If the user is authenticated and tries to access the login page, redirect to profile\r\n    next('/profil');\r\n  } else {\r\n    // Allow navigation for all other routes\r\n    console.log(`Navigating to: ${to.path}, Authenticated: ${store.state.isAuthenticated}`);\r\n    next();\r\n  }\r\n});\r\n\r\nexport default router;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,KAAK,MAAM,kBAAkB;AAEpC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,iBAAiB;EACvBC,SAAS,EAAEL,eAAe;EAC1BM,KAAK,EAAC;AACR,CAAC,EACD;EACEH,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,0BAA0B;AACpD,CAAC,EACD;EACEF,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,gBAAgB;EACtBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,6BAA6B,CAAC;EACtDE,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAChC,CAAC,EACD;EACEL,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,YAAY;EAClBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,yBAAyB,CAAC;EAClDE,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAChC,CAAC,EACD;EACEL,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,oBAAoB;AAC9C,CAAC,EACD;EACEF,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,gBAAgB;EACtBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,6BAA6B,CAAC;EACtDC,KAAK,EAAC;AACR,CAAC,EACD;EACEH,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,4BAA4B;AACtD,CAAC,CACF;AAED,MAAMI,MAAM,GAAGX,YAAY,CAAC;EAC1BY,OAAO,EAAEX,gBAAgB,CAACY,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI,GAAG,CAAC;EACtDX,MAAM,CAAE;AACV,CAAC,CAAC;;AAEF;AACAO,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,eAAe,GAAGjB,KAAK,CAACkB,KAAK,CAACD,eAAe,CAAC,CAAC;;EAErD,IAAIH,EAAE,CAACR,IAAI,CAACC,YAAY,IAAI,CAACU,eAAe,EAAE;IAC5C;IACAD,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM,IAAIF,EAAE,CAACZ,IAAI,KAAK,QAAQ,IAAIe,eAAe,EAAE;IAClD;IACAD,IAAI,CAAC,SAAS,CAAC;EACjB,CAAC,MAAM;IACL;IACAG,OAAO,CAACC,GAAG,CAAE,kBAAiBN,EAAE,CAACZ,IAAK,oBAAmBF,KAAK,CAACkB,KAAK,CAACD,eAAgB,EAAC,CAAC;IACvFD,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeR,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}