{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CardComponent from \"../components/CardComponent.vue\";\nimport api from \"@/services/api\";\nexport default {\n  components: {\n    CardComponent\n  },\n  data() {\n    return {\n      userRecipes: [],\n      favoriteRecipes: [],\n      lajkaniRecepti: [],\n      komentiraniRecepti: []\n    };\n  },\n  async created() {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const userRecipesResponse = await api.get(\"/mojirecepti\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.userRecipes = userRecipesResponse.data;\n      const favoriteRecipesResponse = await api.get(\"/omiljenirecepti\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.favoriteRecipes = favoriteRecipesResponse.data;\n      await this.fetchLajkaniRecepti();\n    } catch (error) {\n      console.error(\"Greška pri dohvaćanju recepata:\", error);\n    }\n  },\n  methods: {\n    async handleComment(receptId, tekstKomentara) {\n      if (!receptId) {\n        console.error(\"Recept ID nije definisan.\");\n        return;\n      }\n      if (!tekstKomentara || tekstKomentara.trim() === \"\") {\n        alert(\"Komentar ne može biti prazan.\");\n        return;\n      }\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"Molimo prijavite se kako biste mogli komentirati recepte.\");\n        this.$router.push(\"/login\");\n        return;\n      }\n      try {\n        const recept = this.userRecipes.find(r => r._id === receptId) || this.favoriteRecipes.find(r => r._id === receptId);\n        if (!recept) {\n          console.error(\"Recept nije pronađen u lokalnim listama.\");\n          return;\n        }\n        const response = await api.post(`/recepti/${receptId}/komentari`, {\n          tekst: tekstKomentara\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        recept.komentari.push(response.data);\n        if (!this.komentiraniRecepti.includes(receptId)) {\n          this.komentiraniRecepti.push(receptId);\n        }\n      } catch (error) {\n        console.error(\"Greška pri dodavanju komentara:\", error);\n        alert(\"Došlo je do greške prilikom dodavanja komentara.\");\n      }\n    },\n    async fetchKomentiraniRecepti() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n      try {\n        const response = await api.get(\"/korisnici/komentirani\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.komentiraniRecepti = response.data;\n        console.log(\"Komentirani recepti:\", this.komentiraniRecepti);\n      } catch (error) {\n        console.error(\"Greška pri dohvaćanju komentiranih recepata:\", error);\n      }\n    },\n    async handleLike(receptId) {\n      if (!receptId) {\n        console.error(\"Recept ID nije definisan.\");\n        return;\n      }\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"Molimo prijavite se kako biste mogli lajkovati recepte.\");\n        this.$router.push(\"/login\");\n        return;\n      }\n      try {\n        const recept = this.userRecipes.find(r => r._id === receptId) || this.favoriteRecipes.find(r => r._id === receptId);\n        if (!recept) {\n          console.error(\"Recept nije pronađen u lokalnim listama.\");\n          return;\n        }\n        if (this.lajkaniRecepti.includes(receptId)) {\n          await api.delete(\"/korisnici/lajk\", {\n            headers: {\n              Authorization: `Bearer ${token}`\n            },\n            params: {\n              receptId\n            }\n          });\n          this.lajkaniRecepti = this.lajkaniRecepti.filter(id => id !== receptId);\n          recept.svidanja--;\n        } else {\n          await api.post(\"/korisnici/lajk\", {\n            receptId\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.lajkaniRecepti.push(receptId);\n          recept.svidanja++;\n        }\n      } catch (error) {\n        console.error(\"Greška pri upravljanju lajkovima:\", error);\n        alert(\"Došlo je do greške prilikom lajkanja/uklanjanja lajka.\");\n      }\n    },\n    async fetchLajkaniRecepti() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n      try {\n        const response = await api.get(\"/korisnici/lajkani\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.lajkaniRecepti = response.data;\n        console.log(\"Lajkani recepti:\", this.lajkaniRecepti);\n      } catch (error) {\n        console.error(\"Greška pri dohvaćanju lajkanih recepata:\", error);\n      }\n    },\n    openRecipe(id) {\n      if (!id) {\n        console.error(\"Recept ID nije definiran.\");\n        return;\n      }\n      this.$router.push({\n        name: \"receptStranica\",\n        params: {\n          id\n        }\n      });\n    },\n    editRecipe(id) {\n      this.$router.push({\n        name: \"urediRecept\",\n        params: {\n          id\n        }\n      });\n    },\n    async deleteRecipe(id) {\n      if (!confirm(\"Jeste li sigurni da želite obrisati ovaj recept?\")) return;\n      try {\n        const token = localStorage.getItem(\"token\");\n        await api.delete(`/brisanjerecepta/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.userRecipes = this.userRecipes.filter(recept => recept._id !== id);\n        alert(\"Recept je uspješno obrisan!\");\n      } catch (error) {\n        console.error(\"Greška pri brisanju recepta:\", error);\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\n      }\n    }\n  },\n  mounted() {\n    this.fetchLajkaniRecepti();\n    this.fetchKomentiraniRecepti();\n  }\n};","map":{"version":3,"names":["CardComponent","api","components","data","userRecipes","favoriteRecipes","lajkaniRecepti","komentiraniRecepti","created","token","localStorage","getItem","userRecipesResponse","get","headers","Authorization","favoriteRecipesResponse","fetchLajkaniRecepti","error","console","methods","handleComment","receptId","tekstKomentara","trim","alert","$router","push","recept","find","r","_id","response","post","tekst","komentari","includes","fetchKomentiraniRecepti","log","handleLike","delete","params","filter","id","svidanja","openRecipe","name","editRecipe","deleteRecipe","confirm","mounted"],"sources":["C:\\Users\\MATIN\\Desktop\\web aplikacije\\WA-frontend\\src\\views\\MojiRecepti.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-3\">\r\n    <div v-if=\"favoriteRecipes.length > 0\">\r\n      <h1 class=\"text-center mb-4\">Omiljeni recepti</h1>\r\n      <div class=\"cards-container\">\r\n        <CardComponent\r\n          v-for=\"recept in favoriteRecipes\"\r\n          :key=\"recept._id\"\r\n          :recept=\"recept\"\r\n          :showActions=\"false\" \r\n          :liked=\"lajkaniRecepti.includes(recept._id)\"\r\n          :commented=\"komentiraniRecepti.includes(recept._id)\" \r\n          @toggle-like=\"handleLike\"\r\n          @open-recipe=\"openRecipe\"\r\n          @add-comment=\"handleComment\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <p v-if=\"favoriteRecipes.length === 0\" class=\"text-center text-muted\">\r\n      Nemate nijedan omiljeni recept. Dodajte recepte u omiljene kako bi se prikazali ovdje!\r\n    </p>\r\n\r\n    <div v-if=\"userRecipes.length > 0\">\r\n      <br>\r\n      <h1 class=\"text-center mb-4\">Moji recepti</h1>\r\n      <div class=\"cards-container\">\r\n        <CardComponent\r\n          v-for=\"recept in userRecipes\"\r\n          :key=\"recept._id\"\r\n          :recept=\"recept\"\r\n          :showActions=\"true\" \r\n          :liked=\"lajkaniRecepti.includes(recept._id)\"\r\n          :commented=\"komentiraniRecepti.includes(recept._id)\" \r\n          @toggle-like=\"handleLike\"\r\n          @open-recipe=\"openRecipe\"\r\n          @edit-recipe=\"editRecipe\"\r\n          @delete-recipe=\"deleteRecipe\"\r\n          @add-comment=\"handleComment\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <p v-if=\"userRecipes.length === 0\" class=\"text-center text-muted\">\r\n      Nemate nijedan svoj recept. Dodajte novi recept kako bi se prikazao ovdje!\r\n    </p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CardComponent from \"../components/CardComponent.vue\";\r\nimport api from \"@/services/api\";\r\n\r\nexport default {\r\n  components: {\r\n    CardComponent,\r\n  },\r\n  data() {\r\n    return {\r\n      userRecipes: [], \r\n      favoriteRecipes: [], \r\n      lajkaniRecepti: [],\r\n      komentiraniRecepti: [], \r\n    };\r\n  },\r\n  async created() {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    const userRecipesResponse = await api.get(\"/mojirecepti\", {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    this.userRecipes = userRecipesResponse.data;\r\n\r\n    const favoriteRecipesResponse = await api.get(\"/omiljenirecepti\", {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    this.favoriteRecipes = favoriteRecipesResponse.data;\r\n\r\n    await this.fetchLajkaniRecepti();\r\n  } catch (error) {\r\n    console.error(\"Greška pri dohvaćanju recepata:\", error);\r\n  }\r\n},\r\n\r\n  methods: {\r\n    async handleComment(receptId, tekstKomentara) {\r\n  if (!receptId) {\r\n    console.error(\"Recept ID nije definisan.\");\r\n    return;\r\n  }\r\n\r\n  if (!tekstKomentara || tekstKomentara.trim() === \"\") {\r\n    alert(\"Komentar ne može biti prazan.\");\r\n    return;\r\n  }\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    alert(\"Molimo prijavite se kako biste mogli komentirati recepte.\");\r\n    this.$router.push(\"/login\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const recept =\r\n      this.userRecipes.find((r) => r._id === receptId) ||\r\n      this.favoriteRecipes.find((r) => r._id === receptId);\r\n\r\n    if (!recept) {\r\n      console.error(\"Recept nije pronađen u lokalnim listama.\");\r\n      return;\r\n    }\r\n\r\n    const response = await api.post(\r\n      `/recepti/${receptId}/komentari`,\r\n      { tekst: tekstKomentara },\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n\r\n    recept.komentari.push(response.data);\r\n\r\n    if (!this.komentiraniRecepti.includes(receptId)) {\r\n      this.komentiraniRecepti.push(receptId);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Greška pri dodavanju komentara:\", error);\r\n    alert(\"Došlo je do greške prilikom dodavanja komentara.\");\r\n  }\r\n},\r\n    async fetchKomentiraniRecepti() {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) return; \r\n\r\n  try {\r\n    const response = await api.get(\"/korisnici/komentirani\", {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    this.komentiraniRecepti = response.data; \r\n    console.log(\"Komentirani recepti:\", this.komentiraniRecepti);\r\n  } catch (error) {\r\n    console.error(\"Greška pri dohvaćanju komentiranih recepata:\", error);\r\n  }\r\n},\r\n    async handleLike(receptId) {\r\n  if (!receptId) {\r\n    console.error(\"Recept ID nije definisan.\");\r\n    return;\r\n  }\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    alert(\"Molimo prijavite se kako biste mogli lajkovati recepte.\");\r\n    this.$router.push(\"/login\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const recept =\r\n      this.userRecipes.find((r) => r._id === receptId) ||\r\n      this.favoriteRecipes.find((r) => r._id === receptId);\r\n\r\n    if (!recept) {\r\n      console.error(\"Recept nije pronađen u lokalnim listama.\");\r\n      return;\r\n    }\r\n\r\n    if (this.lajkaniRecepti.includes(receptId)) {\r\n      await api.delete(\"/korisnici/lajk\", {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n        params: { receptId },\r\n      });\r\n      this.lajkaniRecepti = this.lajkaniRecepti.filter((id) => id !== receptId);\r\n      recept.svidanja--; \r\n    } else {\r\n      await api.post(\"/korisnici/lajk\", { receptId }, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      this.lajkaniRecepti.push(receptId);\r\n      recept.svidanja++; \r\n    }\r\n  } catch (error) {\r\n    console.error(\"Greška pri upravljanju lajkovima:\", error);\r\n    alert(\"Došlo je do greške prilikom lajkanja/uklanjanja lajka.\");\r\n  }\r\n},\r\nasync fetchLajkaniRecepti() {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) return; \r\n\r\n  try {\r\n    const response = await api.get(\"/korisnici/lajkani\", {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    this.lajkaniRecepti = response.data; \r\n    console.log(\"Lajkani recepti:\", this.lajkaniRecepti);\r\n  } catch (error) {\r\n    console.error(\"Greška pri dohvaćanju lajkanih recepata:\", error);\r\n  }\r\n},\r\n    openRecipe(id) {\r\n      if (!id) {\r\n        console.error(\"Recept ID nije definiran.\");\r\n        return;\r\n      }\r\n      this.$router.push({ name: \"receptStranica\", params: { id } });\r\n    },\r\n    editRecipe(id) {\r\n      this.$router.push({ name: \"urediRecept\", params: { id } });\r\n    },\r\n    async deleteRecipe(id) {\r\n      if (!confirm(\"Jeste li sigurni da želite obrisati ovaj recept?\")) return;\r\n\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        await api.delete(`/brisanjerecepta/${id}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        this.userRecipes = this.userRecipes.filter((recept) => recept._id !== id);\r\n        alert(\"Recept je uspješno obrisan!\");\r\n      } catch (error) {\r\n        console.error(\"Greška pri brisanju recepta:\", error);\r\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchLajkaniRecepti();\r\n    this.fetchKomentiraniRecepti(); \r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.cards-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n  justify-items: center;\r\n}\r\n\r\n.text-center {\r\n  font-size: 24px;\r\n  color: #2a231f;\r\n}\r\n\r\n.text-muted {\r\n  color: #888;\r\n  font-size: 18px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}