{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      items: [],\n      // Popunjeno iz baze\n      newItem: \"\",\n      // Nova stavka za unos\n      token: \"\" // Token za autentifikaciju\n    };\n  },\n  methods: {\n    // Dohvati token prilikom pokretanja\n    async fetchToken() {\n      // Pretpostavlja se da token dolazi iz localStorage-a ili drugog izvora\n      this.token = localStorage.getItem(\"authToken\") || \"\";\n    },\n    // Dohvati sve stavke iz shopping liste\n    async fetchItems() {\n      try {\n        const response = await fetch(\"/api/shoppingLista\", {\n          headers: {\n            Authorization: `Bearer ${this.token}` // Dodaj token u zaglavlje\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Greška prilikom dohvaćanja stavki.\");\n        }\n        const data = await response.json();\n        this.items = data;\n      } catch (error) {\n        console.error(\"Greška prilikom dohvaćanja stavki:\", error);\n      }\n    },\n    // Dodaj novu stavku u shopping listu\n    async addItem() {\n      if (this.newItem.trim() !== \"\") {\n        const newItem = {\n          name: this.newItem.trim(),\n          completed: false\n        };\n        try {\n          const response = await fetch(\"/api/shoppingLista\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${this.token}` // Dodaj token u zaglavlje\n            },\n            body: JSON.stringify(newItem)\n          });\n          if (!response.ok) {\n            throw new Error(\"Greška prilikom dodavanja stavke.\");\n          }\n          const addedItem = await response.json();\n          this.items.push(addedItem); // Dodaj novu stavku u lokalnu listu\n          this.newItem = \"\"; // Resetiraj input polje\n        } catch (error) {\n          console.error(\"Greška prilikom dodavanja stavke:\", error);\n        }\n      }\n    },\n    // Obriši označene stavke\n    async removeSelectedItems() {\n      try {\n        const remainingItems = this.items.filter(item => !item.completed);\n        const response = await fetch(\"/api/shoppingLista\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.token}` // Dodaj token u zaglavlje\n          },\n          body: JSON.stringify({\n            items: remainingItems\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Greška prilikom brisanja označenih stavki.\");\n        }\n        this.items = remainingItems;\n      } catch (error) {\n        console.error(\"Greška prilikom brisanja označenih stavki:\", error);\n      }\n    },\n    // Ažuriraj stavku u shopping listi\n    async updateItem(index) {\n      const item = this.items[index];\n      try {\n        const response = await fetch(`/api/shoppingLista/${index}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.token}` // Dodaj token u zaglavlje\n          },\n          body: JSON.stringify(item) // Pošalji ažurirani objekt stavke\n        });\n        if (!response.ok) {\n          throw new Error(\"Greška prilikom ažuriranja stavke.\");\n        }\n      } catch (error) {\n        console.error(\"Greška prilikom ažuriranja stavke:\", error);\n      }\n    }\n  },\n  async mounted() {\n    await this.fetchToken(); // Dohvati token pri učitavanju\n    await this.fetchItems(); // Dohvati stavke iz baze\n  }\n};","map":{"version":3,"names":["data","items","newItem","token","methods","fetchToken","localStorage","getItem","fetchItems","response","fetch","headers","Authorization","ok","Error","json","error","console","addItem","trim","name","completed","method","body","JSON","stringify","addedItem","push","removeSelectedItems","remainingItems","filter","item","updateItem","index","mounted"],"sources":["C:\\Users\\MATIN\\Desktop\\web aplikacije\\WA-frontend\\src\\views\\ShoppingLista.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2 class=\"title\">Lista namirnica za kupovinu:</h2>\r\n    <div class=\"button-container\">\r\n      <input v-model=\"newItem\" placeholder=\"Dodaj namirnicu...\" />\r\n      <button class=\"button\" @click=\"addItem\">Dodaj namirnicu</button>\r\n      <button class=\"button delete-button\" @click=\"removeSelectedItems\">\r\n        Obriši označene\r\n      </button>\r\n    </div>\r\n    <ul class=\"item-list\">\r\n      <li\r\n        v-for=\"(item, index) in items\"\r\n        :key=\"index\"\r\n        :class=\"{ completed: item.completed }\"\r\n      >\r\n        <div class=\"item-content\">\r\n          <input\r\n            type=\"checkbox\"\r\n            v-model=\"item.completed\"\r\n            @change=\"updateItem(index)\"\r\n          />\r\n          <span>{{ index + 1 }}. {{ item.name }}</span>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      items: [], // Popunjeno iz baze\r\n      newItem: \"\", // Nova stavka za unos\r\n      token: \"\", // Token za autentifikaciju\r\n    };\r\n  },\r\n  methods: {\r\n    // Dohvati token prilikom pokretanja\r\n    async fetchToken() {\r\n      // Pretpostavlja se da token dolazi iz localStorage-a ili drugog izvora\r\n      this.token = localStorage.getItem(\"authToken\") || \"\";\r\n    },\r\n\r\n    // Dohvati sve stavke iz shopping liste\r\n    async fetchItems() {\r\n      try {\r\n        const response = await fetch(\"/api/shoppingLista\", {\r\n          headers: {\r\n            Authorization: `Bearer ${this.token}`, // Dodaj token u zaglavlje\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Greška prilikom dohvaćanja stavki.\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        this.items = data;\r\n      } catch (error) {\r\n        console.error(\"Greška prilikom dohvaćanja stavki:\", error);\r\n      }\r\n    },\r\n\r\n    // Dodaj novu stavku u shopping listu\r\n    async addItem() {\r\n      if (this.newItem.trim() !== \"\") {\r\n        const newItem = { name: this.newItem.trim(), completed: false };\r\n        try {\r\n          const response = await fetch(\"/api/shoppingLista\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`, // Dodaj token u zaglavlje\r\n            },\r\n            body: JSON.stringify(newItem),\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(\"Greška prilikom dodavanja stavke.\");\r\n          }\r\n\r\n          const addedItem = await response.json();\r\n          this.items.push(addedItem); // Dodaj novu stavku u lokalnu listu\r\n          this.newItem = \"\"; // Resetiraj input polje\r\n        } catch (error) {\r\n          console.error(\"Greška prilikom dodavanja stavke:\", error);\r\n        }\r\n      }\r\n    },\r\n\r\n    // Obriši označene stavke\r\n    async removeSelectedItems() {\r\n      try {\r\n        const remainingItems = this.items.filter((item) => !item.completed);\r\n\r\n        const response = await fetch(\"/api/shoppingLista\", {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.token}`, // Dodaj token u zaglavlje\r\n          },\r\n          body: JSON.stringify({ items: remainingItems }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Greška prilikom brisanja označenih stavki.\");\r\n        }\r\n\r\n        this.items = remainingItems;\r\n      } catch (error) {\r\n        console.error(\"Greška prilikom brisanja označenih stavki:\", error);\r\n      }\r\n    },\r\n\r\n    // Ažuriraj stavku u shopping listi\r\n    async updateItem(index) {\r\n      const item = this.items[index];\r\n      try {\r\n        const response = await fetch(`/api/shoppingLista/${index}`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.token}`, // Dodaj token u zaglavlje\r\n          },\r\n          body: JSON.stringify(item), // Pošalji ažurirani objekt stavke\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Greška prilikom ažuriranja stavke.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Greška prilikom ažuriranja stavke:\", error);\r\n      }\r\n    },\r\n  },\r\n  async mounted() {\r\n    await this.fetchToken(); // Dohvati token pri učitavanju\r\n    await this.fetchItems(); // Dohvati stavke iz baze\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 700px;\r\n  margin: 20px auto;\r\n  padding: 20px;\r\n  background: #fbf5e5;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.title {\r\n  text-align: center;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n  color: #2a231f;\r\n}\r\n\r\n.button-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\ninput {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.button {\r\n  padding: 10px 20px;\r\n  background: #2a231f;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.button:hover {\r\n  background: #fbf5e5;\r\n  color: #2a231f;\r\n}\r\n\r\n.item-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin-top: 20px;\r\n}\r\n\r\n.item-list li {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background: #fee6c1;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.item-list li:hover {\r\n  background: #ffe9c6;\r\n}\r\n\r\n.item-list li.completed span {\r\n  text-decoration: line-through;\r\n  color: #888;\r\n}\r\n\r\n.item-content {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.item-content input[type=\"checkbox\"] {\r\n  margin-right: 10px;\r\n}\r\n\r\n.delete-button {\r\n  background: #dc3545;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 5px 10px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.delete-button:hover {\r\n  background: #a71d2a;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}