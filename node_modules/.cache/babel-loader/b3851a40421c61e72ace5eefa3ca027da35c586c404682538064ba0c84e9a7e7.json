{"ast":null,"code":"import api from \"@/services/api\";\nexport default {\n  props: {\n    recept: Object,\n    showActions: {\n      type: Boolean,\n      default: false\n    },\n    isLiked: false\n  },\n  async created() {\n    try {\n      // Dohvati podatke o receptu, uključujući isFavorite i isLiked\n      const response = await api.get(`/recepti/${this.$route.params.id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      this.recipe = response.data;\n      this.isFavorite = response.data.isFavorite;\n      this.isLiked = response.data.isLiked;\n    } catch (error) {\n      console.error(\"Greška pri dohvaćanju podataka:\", error);\n    }\n  },\n  methods: {\n    async toggleLike() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (this.isLiked) {\n          // Ukloni lajk\n          await api.delete(\"/korisnici/lajk\", {\n            headers: {\n              Authorization: `Bearer ${token}`\n            },\n            params: {\n              receptId: this.recipe._id\n            }\n          });\n          this.isLiked = false;\n          this.recipe.svidanja--;\n          alert(\"Lajk uklonjen.\");\n        } else {\n          // Dodaj lajk\n          await api.post(\"/korisnici/lajk\", {\n            receptId: this.recipe._id\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.isLiked = true;\n          this.recipe.svidanja++;\n          alert(\"Recept lajkan.\");\n        }\n      } catch (error) {\n        console.error(\"Greška pri upravljanju lajkovima:\", error);\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\n      }\n    },\n    toggleComments() {\n      this.showComments = !this.showComments;\n    },\n    async toggleFavorite() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (this.isFavorite) {\n          // Ukloni iz omiljenih\n          await api.delete(\"/korisnici/omiljeni\", {\n            headers: {\n              Authorization: `Bearer ${token}`\n            },\n            params: {\n              receptId: this.recipe._id\n            }\n          });\n          this.isFavorite = false;\n          alert(\"Recept je uklonjen iz omiljenih.\");\n        } else {\n          // Dodaj u omiljene\n          await api.post(\"/korisnici/omiljeni\", {\n            receptId: this.recipe._id\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.isFavorite = true;\n          alert(\"Recept je dodan u omiljene.\");\n        }\n      } catch (error) {\n        console.error(\"Greška pri upravljanju omiljenima:\", error);\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","props","recept","Object","showActions","type","Boolean","default","isLiked","created","response","get","$route","params","id","headers","Authorization","localStorage","getItem","recipe","data","isFavorite","error","console","methods","toggleLike","token","delete","receptId","_id","svidanja","alert","post","toggleComments","showComments","toggleFavorite"],"sources":["C:\\Users\\MATIN\\Desktop\\web aplikacije\\WA-frontend\\src\\components\\CardComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"recept-card\">\r\n    <img :src=\"recept.slika\" alt=\"Slika recepta\" class=\"recept-image\" />\r\n    <h2 class=\"recept-naziv\">{{ recept.naziv }}</h2>\r\n    <p><strong>Sastojci:</strong> {{ recept.sastojci.join(\", \") }}</p>\r\n    <p><strong>Porcije:</strong> {{ recept.porcije }}</p>\r\n    <div class=\"recept-interakcije\">\r\n      <div class=\"like-container\">\r\n        <button class=\"recept-button1\" @click=\"toggleLike\"\r\n>{{isLiked ? \"Ukloni lajk\" : \"Dodaj lajk\" }}\r\n<span>{{ recept.svidanja }}</span>\r\n</button>\r\n      </div>\r\n      <div class=\"komentar-container\">\r\n        <button class=\"recept-button1\">\r\n        <img src=\"commentne.png\" height=\"25px\" alt=\"komentar\" />\r\n        <span>{{ recept.komentari.length }}</span>\r\n      </button>\r\n      </div>\r\n    </div>\r\n    <button class=\"recept-button\" @click=\"$emit('open-recipe', recept._id)\">\r\n      Pogledaj recept\r\n    </button>\r\n    <div v-if=\"showActions\" class=\"action-buttons\">\r\n      <button class=\"edit-button\" @click=\"$emit('edit-recipe', recept._id)\">Uredi</button>\r\n      <button class=\"delete-button\" @click=\"$emit('delete-recipe', recept._id)\">Obriši</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"@/services/api\";\r\n\r\nexport default {\r\n  props: {\r\n    recept: Object,\r\n    showActions: { \r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    isLiked: false,\r\n},\r\nasync created() {\r\n    try {\r\n      // Dohvati podatke o receptu, uključujući isFavorite i isLiked\r\n      const response = await api.get(`/recepti/${this.$route.params.id}`, {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n      });\r\n      this.recipe = response.data;\r\n      this.isFavorite = response.data.isFavorite;\r\n      this.isLiked = response.data.isLiked;\r\n    } catch (error) {\r\n      console.error(\"Greška pri dohvaćanju podataka:\", error);\r\n    }\r\n  },\r\n  methods: {\r\n    async toggleLike() {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n\r\n        if (this.isLiked) {\r\n          // Ukloni lajk\r\n          await api.delete(\"/korisnici/lajk\", {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params: { receptId: this.recipe._id },\r\n          });\r\n          this.isLiked = false;\r\n          this.recipe.svidanja--;\r\n          alert(\"Lajk uklonjen.\");\r\n        } else {\r\n          // Dodaj lajk\r\n          await api.post(\"/korisnici/lajk\", { receptId: this.recipe._id }, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          this.isLiked = true;\r\n          this.recipe.svidanja++;\r\n          alert(\"Recept lajkan.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Greška pri upravljanju lajkovima:\", error);\r\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\r\n      }\r\n    },\r\n    toggleComments() {\r\n      this.showComments = !this.showComments;\r\n    },\r\n    async toggleFavorite() {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n\r\n        if (this.isFavorite) {\r\n          // Ukloni iz omiljenih\r\n          await api.delete(\"/korisnici/omiljeni\", {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params: { receptId: this.recipe._id },\r\n          });\r\n          this.isFavorite = false;\r\n          alert(\"Recept je uklonjen iz omiljenih.\");\r\n        } else {\r\n          // Dodaj u omiljene\r\n          await api.post(\"/korisnici/omiljeni\", { receptId: this.recipe._id }, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          this.isFavorite = true;\r\n          alert(\"Recept je dodan u omiljene.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Greška pri upravljanju omiljenima:\", error);\r\n        alert(\"Došlo je do greške. Pokušajte ponovno.\");\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.action-buttons {\r\n  margin-top: 15px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 10px;\r\n}\r\n\r\n.edit-button,\r\n.delete-button {\r\n  padding: 10px 15px;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, color 0.3s ease;\r\n}\r\n\r\n.edit-button {\r\n  background-color: #2a231f; \r\n  color: #fff;\r\n}\r\n\r\n.edit-button:hover {\r\n  background-color: #fbf5e5; \r\n  color: #c97d60; \r\n}\r\n\r\n.delete-button {\r\n  background-color: #c94e50; \r\n  color: #fff;\r\n}\r\n\r\n.delete-button:hover {\r\n  background-color: #ff6b6b;\r\n  color: #fff;\r\n}\r\n\r\n.recept-card {\r\n  width: 100%;\r\n  max-width: 300px;\r\n  padding: 20px;\r\n  background-color: #fee6c1;\r\n  border: 1px solid #2a231f;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.recept-card:hover {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.recept-image {\r\n  width: 100%;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 8px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.recept-naziv {\r\n  font-size: 1.5rem;\r\n  color: #333;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.recept-interakcije {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n  padding: 0 10px;\r\n}\r\n\r\n.like-container,\r\n.komentar-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\n.recept-button {\r\n  padding: 10px 15px;\r\n  background: #2a231f;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  margin-top: 15px;\r\n  transition: background 0.3s ease;\r\n}\r\n.recept-button1 {\r\n  padding: 10px 15px;\r\n  background: #fee6c1;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  margin-top: 15px;\r\n  transition: background 0.3s ease;\r\n}\r\n.recept-button1:hover {\r\n  background: #fbf5e5;\r\n  color: #c97d60;\r\n}\r\n.recept-button:hover {\r\n  background: #fbf5e5;\r\n  color: #c97d60;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}